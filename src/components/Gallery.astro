---
import { v2 as cloudinary } from "cloudinary";
import { Picture } from "@astrojs/image/components";
import { Icon } from "astro-icon";

export interface Props {
  folder: string;
}

export interface CloudinaryResource {
  secure_url: string;
  resource_type: string;
  width: number;
  height: number;
  duration: number;
  aspect_ratio: number;
  context: { alt: string };
}

cloudinary.config({
  cloud_name: import.meta.env.PUBLIC_CLOUDINARY_CLOUD_NAME,
  api_key: import.meta.env.PUBLIC_CLOUDINARY_API_KEY,
  api_secret: import.meta.env.SECRET_CLOUDINARY_API_KEY,
  secure: true,
});

const search = await cloudinary.search
  .expression(`folder:${Astro.props.folder}`)
  .with_field("context")
  .sort_by("filename", "asc")
  .max_results(import.meta.env.DEV ? 5 : 500)
  .execute();

const resources = search.resources as CloudinaryResource[];
---

<div class="flex flex-wrap m-0.5">

  {resources.map((CloudinaryResource, index) => (
    <div
      data-position={`${index == 0 ? "first" : index + 1 == resources.length ? "last" : "middle"}`}
      onclick="setFullscreen(this)"
      ontouchend="if (!isScrolling) setFullscreen(this)"
      class="relative m-0.5 cursor-zoom-in fullscreen:cursor-auto"
      style={`flex-grow: ${CloudinaryResource.width * 300 / CloudinaryResource.height}; flex-basis: ${CloudinaryResource.width * 300 / CloudinaryResource.height}px;`}
    >

      <!-- placeholder for proper grid sizing -->
      <div class="block" style={`padding-bottom: ${CloudinaryResource.height / CloudinaryResource.width * 100}%`}></div>

      {CloudinaryResource.resource_type == "image" ? (
        // loading icon only shown in fullscreen mode
        <div role="status" class="fullscreen:block fullscreen:fixed z-[2] absolute top-1/2 left-1/2 hidden -translate-x-1/2 -translate-y-1/2">
          <Icon name="loading" class="inline w-20 h-20 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" />
          <span class="sr-only">loading image...</span>
        </div>

        <Picture
          src={CloudinaryResource.secure_url}
          aspectRatio={CloudinaryResource.aspect_ratio}
          widths={[2000, 1200, 800]}
          draggable="false"
          sizes="(min-width: 1150px) 50vw, (min-width: 900px) 75vw, 100vw" // various layout breakpoints
          class="resource absolute align-bottom top-0 w-full h-full object-cover opacity-0 transition-opacity ease-in duration-1000 fullscreen:pointer-events-none"
          onload="this.style.opacity=1; this.parentNode.previousElementSibling.style.display = 'none';" // fade in image after loading, remove loading icon
          loading={`${index <= 5 ? "eager" : "lazy"}`}
          alt={`"Concert Photograph by Eric Dew${CloudinaryResource.context ? " of " + CloudinaryResource.context.alt : ""}`}
        />
      ) : (
        <div>
          <video
            id={`video-${index}`}
            loop webkit-playsinline playsinline
            preload="none"
            onclick="this.paused ? this.play() : this.pause()"
            onmouseover="previewVideo(this)"
            onmouseout="resetVideo(this)"
            poster-src={CloudinaryResource.secure_url.replace(".mp4", ".jpg")}
            class="resource absolute top-0 h-full w-full object-cover align-bottom pointer-events-none fullscreen:pointer-events-auto"
          >

            <source src={CloudinaryResource.secure_url} type="video/mp4" />
            Your browser does not support HTML video.

          </video>
        </div>

          <div class="video-duration pointer-events-none fullscreen:pr-6 fullscreen:pt-6 fullscreen:z-[2] fullscreen:right-0 fullscreen:fixed absolute top-0 flex w-full items-center justify-end bg-gradient-to-b from-black/50 to-transparent font-mono">
            <div class="text-xs">
              <span id={`current-time-video-${index}`} class="current-time hidden fullscreen:inline-flex">0:00 / </span>
              <span>{new Date(CloudinaryResource.duration * 1000).toISOString().slice(15, 19)}</span>
            </div>
            <Icon name="circle-play-regular" class="fill-slate-100 h-6 m-2 fullscreen:hidden" />
          </div>
      )}
    </div>
  ))}

  <!-- placeholders required to properly size images in the last/incomplete row -->
  {Array.from({length: 10}, () => (
    <div class="m-0 h-0 grow-[100] basis-[240px]"></div>
  ))}

</div>

<div id="fullscreen-backdrop" class="fixed inset-0 z-[1] w-screen h-screen bg-black pointer-events-none opacity-0 transition-opacity duration-200"></div>

<div id="fullscreen-controls" class="fixed top-0 z-[3] w-screen h-screen pointer-events-none opacity-0 transition-opacity duration-200">
  <button type="button" onclick="prevImage()" class="fixed left-0 mt-[25vh] flex h-[50vh] w-[15vw] items-center opacity-0 hover:opacity-100 md:w-[25vw]">
    <div class="absolute left-0 ml-4 rounded-full bg-neutral-700 p-2 md:ml-8 md:p-4">
      <Icon name="chevron-left-solid" class="w-4 md:w-6 h-4 md:h-6 fill-slate-100" />
      <span class="sr-only">previous image</span>
    </div>
  </button>

  <button type="button" onclick="nextImage()" class="fixed right-0 mt-[25vh] flex h-[50vh] w-[15vw] items-center opacity-0 hover:opacity-100 md:w-[25vw]">
    <div class="absolute right-0 mr-4 rounded-full bg-neutral-700 p-2 md:mr-8 md:p-4">
      <Icon name="chevron-right-solid" class="w-4 md:w-6 h-4 md:h-6 fill-slate-100" />
      <span class="sr-only">next image</span>
    </div>
  </button>

  <button type="button" onclick="escapeFullscreen(true)" class="fixed mt-2 ml-2 rounded-full p-3 hover:bg-slate-100/10">
    <Icon name="xmark-solid" class="w-6 h-6 fill-slate-100" />
    <span class="sr-only">exit image</span>
  </button>
</div>

<script client:inline>
  let isAnimating = false;

  function setFullscreen(element, animation) {
    // ignore clicks when already fullscreen
    if (element.id == "fullscreen") {
      return;
    }

    disableScrolling();
    enableFullscreenControls();
    element.id = "fullscreen";

    const resource = element.querySelector(".resource");
    
    if (animation) {
      isAnimating = true;

      resource.classList.add(animation);
      fullscreenResource(resource)

      setTimeout(() => {
        playFullscreenVideo();
        resource.classList.remove(animation);
        isAnimating = false;
      }, 200);
    } else {
      zoomIn(resource);
    }
  }

  function escapeFullscreen(close) {
    const fullscreen = document.getElementById("fullscreen");

    if (!fullscreen || isAnimating) return;

    fullscreen.querySelector("video")?.pause();
    fullscreen.querySelector("video")?.blur();

    if (close) {
      zoomOut(fullscreen.querySelector(".resource"));
      disableFullscreenControls();
    } else {
      resetElement(fullscreen.querySelector(".resource"))
    }
    
    fullscreen.removeAttribute("id");
  }

  function slideTo(element, animationOut, animationIn) {
    const fullscreen = document.getElementById("fullscreen");

    if (!fullscreen || isAnimating) return;

    const resource = fullscreen.querySelector(".resource");
    resource.classList.add(animationOut);
    fullscreen.querySelector("video")?.pause();

    isAnimating = true;

    setTimeout(() => {
      resource.classList.remove(animationOut);

      isAnimating = false;

      escapeFullscreen(false);
      setFullscreen(element, animationIn);
    }, 200);
  }

  function prevImage() {
    const fullscreen = document.getElementById("fullscreen");

    if (!fullscreen || isAnimating) return;

    slideTo(
      fullscreen.dataset.position == "first"
        ? document.querySelector("[data-position='last']")
        : fullscreen.previousSibling,
      "animate-slide-out-right",
      "animate-slide-in-left"
    );
  }

  function nextImage() {
    const fullscreen = document.getElementById("fullscreen");

    if (!fullscreen || isAnimating) return;

    slideTo(
      fullscreen.dataset.position == "last"
          ? document.querySelector("[data-position='first']")
          : fullscreen.nextSibling,
      "animate-slide-out-left",
      "animate-slide-in-right"
    );
  }

  document.onkeydown = (event) => {
    const fullscreen = document.getElementById("fullscreen");

    if (!fullscreen || isAnimating) return;

    if (event.key == "Escape") {
      escapeFullscreen(true);
    } else if (event.key == "ArrowLeft" || event.key == "ArrowUp") {
      prevImage();
    } else if (event.key == "ArrowRight" || event.key == "ArrowDown") {
      nextImage();
    }
  };

  function zoomIn(element) {
    const rect = element.getBoundingClientRect();
    const screenWidth = window.innerWidth;
    const screenHeight = window.innerHeight;
    const resourceLeft = rect.left;
    const resourceTop = rect.top;
    const resourceHeight = rect.height;
    const resourceWidth = rect.width;
    const resourceAspectRatio = resourceHeight / resourceWidth;
    const screenAspectRatio = screenHeight / screenWidth;
    const isVertical = resourceAspectRatio > screenAspectRatio;

    freezeElement(element);

    // now transition the element to be fullscreen
    element.getBoundingClientRect(); // required for animation to work

    element.style.transition = "all 200ms ease-in-out";
    element.style.width = isVertical ? "auto" : "100vw";
    element.style.height = isVertical ? "100vh" : "auto";
    
    // align left + half screen width - (half final element width or half screen width)
    element.style.marginLeft = -resourceLeft + (screenWidth / 2) - (Math.min((screenHeight / resourceHeight) * resourceWidth, screenWidth) / 2) + "px";
    // align top + half screen height - (half final element height or half screen height)
    element.style.marginTop = -resourceTop + (screenHeight / 2) - (Math.min((screenWidth / resourceWidth) * resourceHeight, screenHeight) / 2) + "px";
    
    // disable certain interactions while animating
    isAnimating = true;

    // set properties to allow dynamic scaling once animation is finished
    setTimeout(() => {
      element.style.removeProperty("transition");
      element.style.removeProperty("top");
      element.style.removeProperty("margin-top");
      element.style.removeProperty("margin-left");

      fullscreenResource(element);
      playFullscreenVideo();

      isAnimating = false;
    }, 200);
  }

  function zoomOut(element) {
    // disable certain interactions while animating
    isAnimating = true;

    // align screen with the resource being closed
    enableScrolling();
    element.parentElement.parentElement.scrollIntoView({ block: "center" });
    disableScrolling();

    freezeElement(element);

    // resize the image back to the grid size
    const rect = element.parentElement.parentElement.getBoundingClientRect();
    element.style.transition = "all 200ms ease-in-out";
    element.style.width = rect.width + "px";
    element.style.height = rect.height + "px";
    element.style.top = rect.top + "px";
    element.style.left = rect.left + "px";

    // reset properties to allow dynamic scaling once animation is finished
    setTimeout(() => {
      resetElement(element);
      enableScrolling();
      isAnimating = false;
    }, 200);
  }

  // position the element fixed exactly where it is
  // required in order to animate it
  function freezeElement(element) {
    const rect = element.getBoundingClientRect();
    element.style.width = rect.width + "px";
    element.style.height = rect.height + "px";
    element.style.top = rect.top + "px";
    element.style.position = "fixed";
    element.style.zIndex = 2;
  }

  function fullscreenResource(element) {
    element.style.width = "100vw"
    element.style.height = "100vh"
    element.style.objectFit = "contain"
    element.style.inset = 0;
    element.style.zIndex = 2;
    element.style.position = "fixed";
    element.scrollIntoView({ block: "center" });
  }

  function resetElement(element) {
    element.style.removeProperty("transition");
    element.style.removeProperty("width");
    element.style.removeProperty("height");
    element.style.removeProperty("top");
    element.style.removeProperty("position");
    element.style.removeProperty("z-index");
    element.style.removeProperty("margin-left");
    element.style.removeProperty("margin-top");
    element.style.removeProperty("inset");
    element.style.removeProperty("object-fit");
  }

  function disableScrolling() {
    const bodyWidthBefore = document.body.clientWidth;
    document.body.classList.add("overflow-hidden");

    // if body width changes, add padding to account for the now hidden scrollbar
    if (bodyWidthBefore < document.body.clientWidth) {
      document.body.classList.add("mr-4");
    }
  }

  function enableScrolling() {
    document.body.classList.remove("overflow-hidden");
    document.body.classList.remove("mr-4");
  }

  function enableFullscreenControls() {
    const controls = document.getElementById("fullscreen-controls");
    controls.style.pointerEvents = "auto";
    controls.style.opacity = 1;

    const backdrop = document.getElementById("fullscreen-backdrop");
    backdrop.style.opacity = 1;
  }

  function disableFullscreenControls() {
    const controls = document.getElementById("fullscreen-controls");
    controls.style.pointerEvents = "none";
    controls.style.opacity = 0;

    const backdrop = document.getElementById("fullscreen-backdrop");
    backdrop.style.opacity = 0;
  }

  function previewVideo(video) {
    if (!document.getElementById("fullscreen")) {
      video.muted = true;
      video.play();
    }
  }

  function resetVideo(video) {
    if (!document.getElementById("fullscreen")) {
      video.muted = false;
      video.currentTime = 0;
      video.pause();
    }
  }

  function playFullscreenVideo() {
    const fullscreen = document.getElementById("fullscreen");

    if (!fullscreen) return;

    const video = fullscreen.querySelector("video");

    if (!video) return;

    video.focus();
    video.play();
    video.muted = false;
  }

  const threshold = 50; // threshold value in pixels
  let isScrolling = false;
  let startX;
  let endX;
  let startY;
  let endY;

  document.addEventListener("touchstart", (e) => {
    isScrolling = false;
    startX = e.changedTouches[0].screenX;
    startY = e.changedTouches[0].screenY;
  }, { passive: true });

  document.addEventListener("touchmove", (e) => {
    isScrolling = true;
  }, { passive: true });

  document.addEventListener("touchend", (e) => {
    endX = e.changedTouches[0].screenX;
    endY = e.changedTouches[0].screenY;

    const fullscreen = document.getElementById("fullscreen");

    if (!fullscreen || isAnimating) {
      return;
    }

    // prevent small movements
    if (Math.abs(startX - endX) < threshold && Math.abs(startY - endY) < threshold) {
      return;
    }

    // vertical scrolling
    if (Math.abs(startY - endY) > threshold) {
      escapeFullscreen(true);
      return;
    }

    if (endX < startX) nextImage();
    else if (endX > startX) prevImage();
  });
</script>

<!-- handle updating the current time of the video playing when fullscreen -->
<script>
  const videos = document.querySelectorAll("video");
  const intervals: { [key: string]: any } = {};

  videos.forEach((video) => {
    const currentTimeSpan = document.getElementById(`current-time-${video.id}`);

    video.addEventListener("play", () => {
      intervals[video.id] = setInterval(() => {
        const minutes = Math.floor(video.currentTime / 60);
        const seconds = Math.floor(video.currentTime % 60);
        currentTimeSpan!.innerHTML = `${minutes}:${seconds.toString().padStart(2, "0")} / `;
      }, 500);
    });

    video.addEventListener("pause", () => {
      clearInterval(intervals[video.id]);
    });
  });
</script>

<script src="../scripts/lazy-load-videos.js"></script>
